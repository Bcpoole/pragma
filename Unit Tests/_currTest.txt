/*
  Ro
  //Wumbo Mumbo
*/

/*
Node(key, value, left, right, color) {
  color = "black";
  this;
}

RedBlackTree(root, freshNode, currentNode) {
  freshNode = Node("", "", "", "", "");
  freshNode.left = freshNode;
  freshNode.right = freshNode;
  root = Node("", "", "", "", "");
  parentNode = Node("", "", "", "", "");
  grandparentNode = Node("", "", "", "", "");
  tempNode = Node("", "", "", "", "");
  
  compare(item, node) {
    if (node.key != root.key) {
      //reference Search    
    } else  {
    
    }
  }
  
  display(node) {
    if (node.value != "") {
      display(node.left);
      println(node.value);
      display(node.right);
    }
  }

  this;
} */

println(compareStrings("b", "a"));
println(compareStrings("b", "b"));
println(compareStrings("b", "c"));